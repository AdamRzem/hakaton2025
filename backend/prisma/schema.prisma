// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  userId String @id @default(cuid())
  email String @unique
  password String
  reputation Int
  reports Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upvoted Upvoted[]
  downvoted Downvoted[]
}

model Report{
  reportId String @id @default(cuid())
  userId String?
  user User? @relation(fields: [userId],references: [userId])
  location String
  date String
  description String?
  lineNumber Int?
  score Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upvotes Upvoted[]
  downvotes Downvoted[]
}
model Upvoted{
  upvotedId String @id @default(cuid())
  userId String
  reportId String
  user User @relation(fields: [userId], references: [userId])
  report Report @relation(fields: [reportId], references: [reportId])
  createdAt DateTime @default(now())
  @@unique([userId, reportId])
}
model Downvoted{
  downvotedId String @id @default(cuid())
  userId String
  reportId String
  user User @relation(fields: [userId], references: [userId])
  report Report @relation(fields: [reportId], references: [reportId])
  createdAt DateTime @default(now())
  @@unique([userId, reportId])
}